name: Build and Release Contract

on:
  workflow_call:
    inputs:
      relative_path:
        description: 'Relative path to the working directory'
        type: string
        required: false
      make_target:
        description: 'Make target for the contract'
        type: string
        required: false
      package:
        description: 'Package to build'
        type: string
        required: false
      release_name: 
        description: 'Name for the release'
        required: true
        type: string
      release_description:
        description: 'Description for the release'
        required: false
        type: string
    secrets:
      release_token:
        description: 'Github token'
        required: true

jobs:
  build:
    permissions:
      id-token: write
      contents: write
      attestations: write
      
    runs-on: ubuntu-latest 
    steps:
      - name: Set directory names and paths
        run: |
          build_dir_name="build_"$(openssl rand -base64 8 | tr -d '/+=' | head -c 8)
          echo "BUILD_DIR_NAME=$build_dir_name" >> $GITHUB_ENV
          echo "BUILD_DIR_PATH=${{ github.workspace }}/$build_dir_name" >> $GITHUB_ENV

      - name: Verify that checkout directory doesn't exist
        run: |
          if [[ -d ${{ env.BUILD_DIR_PATH }} ]]; then
            echo "Directory ${{ env.BUILD_DIR_PATH }} already exists"
            exit 1
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: ${{ env.BUILD_DIR_NAME }}

      - name: Run docker container
        working-directory: ${{ env.BUILD_DIR_PATH }}
        run: docker run --rm -e RELATIVE_PATH=${{ inputs.relative_path }} -e MAKE_TARGET=${{ inputs.make_target }} -e PACKAGE=${{ inputs.package }} -v "${{ env.BUILD_DIR_PATH }}:/inspector/home" ghcr.io/hawthorne-abendsen/contract-build-workflow:v20.3.12

      - name: Get compilation info
        working-directory: ${{ env.BUILD_DIR_PATH }}
        run: |
          # Compilation info JSON file
          JSON_FILE="${BUILD_DIR_PATH}/compilation_workflow_release/compilation_info.json"

          # Check if the file exists
          if [ -f "$JSON_FILE" ]; then
              # Read the JSON file
              json=$(cat "$JSON_FILE")
          
              # Parse values from JSON using native Bash commands
              PACKAGE_NAME=$(echo "$json" | grep -oP '"packageName": "\K[^"]+')
              PACKAGE_VERSION=$(echo "$json" | grep -oP '"packageVersion": "\K[^"]+')
              CLI_VERSION=$(echo "$json" | grep -oP '"cliVersion": "\K[^"]+')
              WASM_FILE_NAME=$(echo "$json" | grep -oP '"wasmFileName": "\K[^"]+')
              WASM_HASH=$(echo "$json" | grep -oP '"wasmHash": "\K[^"]+')
          
              # Set environment variables using 'echo' to be picked up by GitHub Actions
              echo "PACKAGE_NAME=$PACKAGE_NAME" >> $GITHUB_ENV
              echo "PACKAGE_VERSION=$PACKAGE_VERSION" >> $GITHUB_ENV
              echo "CLI_VERSION=$CLI_VERSION" >> $GITHUB_ENV
              echo "WASM_FILE_NAME=$WASM_FILE_NAME" >> $GITHUB_ENV
              echo "WASM_HASH=$WASM_HASH" >> $GITHUB_ENV
          else
              echo "The JSON file $JSON_FILE does not exist."
              exit 1
          fi
      
      - name: Build release name
        run: |
          if [ -n "${{ inputs.relative_path }}" ]; then
            relative_path=$(echo "_${{ inputs.relative_path }}" | sed 's/\W\+/_/g')
          fi

          # Check if the release_name input is equal to PACKAGE_VERSION
          if [ "${{ inputs.release_name }}" != "${{ env.PACKAGE_VERSION }}" ] && [ "${{ inputs.release_name }}" != "v${{ env.PACKAGE_VERSION }}" ]; then
            pkg_version="_pkg${{ env.PACKAGE_VERSION }}"
          else
            pkg_version=""
          fi

          tag_name="${{ inputs.release_name }}${relative_path}_${{ env.PACKAGE_NAME }}${pkg_version}_cli${{ env.CLI_VERSION }}"
          echo "TAG_NAME=$tag_name" >> $GITHUB_ENV
        
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG_NAME }}
          draft: false
          prerelease: false
          body: ${{ inputs.release_description }}
          files: |
            '${{ env.BUILD_DIR_PATH }}/compilation_workflow_release/${{ env.WASM_FILE_NAME }}'
            '${{ env.BUILD_DIR_PATH }}/compilation_workflow_release/compilation_info.json'
          token: ${{ secrets.release_token }}

      - name: Attest
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: '${{ env.BUILD_DIR_PATH }}/compilation_workflow_release/${{ env.WASM_FILE_NAME }}, ${{ env.BUILD_DIR_PATH }}/compilation_workflow_release/compilation_info.json'