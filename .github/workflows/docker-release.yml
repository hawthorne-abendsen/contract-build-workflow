name: Build, Package and Release

on:
  workflow_dispatch:
    inputs:
      release_name:
        description: 'Name for the release'
        required: true
        type: string              

jobs:
  build_and_docker:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update version in YAML file, commit and push changes
      uses: actions/github-script@v6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        script: |
          const fs = require('fs');
          const path = '.github/workflows/release.yml'
          const initialContent = fs.readFileSync(path, { encoding: 'utf8' })

          let data = fs.readFileSync(path, 'utf8')
          const regex = /ghcr.io\/hawthorne-abendsen\/contract-build-workflow:.*/g
          const replacement = `ghcr.io/hawthorne-abendsen/contract-build-workflow:${{ inputs.release_name }}`
          data = data.replace(regex, replacement)
          fs.writeFileSync(path, data, 'utf8')

          const modifiedContent = fs.readFileSync(path, { encoding: 'utf8' })
          
          if (initialContent !== modifiedContent) 
            console.log('File content has been modified.')
          else
            throw new Error('File content has not been modified.')

          console.log(`${context.ref}: ${context.sha}`)

          const blob = await github.rest.git.createBlob({
            owner: context.repo.owner,
            repo: context.repo.repo,
            content: modifiedContent,
            encoding: 'utf-8',
          })

          const { data: commitData } = await github.rest.git.getCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
          })
          
          const { data: treeData } = await github.rest.git.createTree({
            owner: context.repo.owner,
            repo: context.repo.repo,
            base_tree: commitData.tree.sha,
            tree: [{
              path: '.github/workflows/release.yml',
              mode: '100644',
              type: 'blob',
              sha: blob.data.sha,
            }],
          })
          
          const { data: newCommit } = await github.rest.git.createCommit({
            owner: context.repo.owner,
            repo: context.repo.repo,
            message: `Update version to ${{ inputs.release_name }}`,
            tree: treeData.sha,
            parents: [commitSha],
          })
          
          await github.rest.git.updateRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: 'refs/heads/main',
            sha: newCommit.sha,
          })

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2 

    - name: Log in to GHCR using a PAT
      uses: docker/login-action@v2  
      with:
        registry: ghcr.io
        username: ${{ github.actor }} 
        password: ${{ secrets.GITHUB_TOKEN }} 

    - name: Build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: ./docker
        push: true  
        tags: |
          ghcr.io/${{ github.repository }}:${{ github.sha }}
          ghcr.io/${{ github.repository }}:${{ inputs.release_name }}
          ghcr.io/${{ github.repository }}:latest

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ inputs.release_name }}
        draft: false
        prerelease: false