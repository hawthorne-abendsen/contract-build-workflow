name: Build and Optimize Contract

on:
  workflow_call:
    inputs:
      contract_dir:
        description: 'Relative path to the contract directory'
        type: string
        default: '.'

jobs:
  build:
    runs-on: ubuntu:latest 
    steps:
      - name: Preinstall dependencies
        run: |
          apt-get update && \
          apt-get install -y git curl wget jq build-essential

      - uses: actions/checkout@v3
        
      - name: Get Soroban SDK and Rust Versions
        run: |
          rust_version=$(sed -n '/\[package\]/,/^$/{/rust-version = /{s/rust-version = "\(.*\)"/\1/p;}}' Cargo.toml) 
          echo "Required Rust version: $rust_version"

          if [ -z "$rust_version" ]; then
            rust_version = "stable"
          fi

      - name: Setup Rust
        run: |   
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup install ${{ env.rust_version }} 
          rustup default ${{ env.rust_version }}

          rustup target add wasm32-unknown-unknown
          if [ $? -ne 0 ]; then
            echo "Error: Failed to setup Rust"
            exit 1
          fi

      - name: Install binaryen
        run: |
          wget https://github.com/WebAssembly/binaryen/releases/download/version_101/binaryen-version_101-x86_64-linux.tar.gz
          tar -xzf binaryen-version_101-x86_64-linux.tar.gz
          cp binaryen-version_101/bin/wasm-opt /usr/local/bin/

          if [ $? -ne 0 ]; then
            echo "Error: Failed to install binaryen"
            exit 1
          fi
          
      - name: Run Tests
        working-directory: ${{ inputs.contract_dir }} 
        if: inputs.contract_dir != '.'
        run: |
          cargo test --target wasm32-unknown-unknown

          if [ $? -ne 0 ]; then
            echo "Error: Tests failed"
            exit 1
          fi 

      - name: Build and Optimize
        working-directory: ${{ inputs.contract_dir }} 
        if: inputs.contract_dir != '.'
        run: |
          # Build the project
          cargo build --target wasm32-unknown-unknown --release  

          # Optimization steps
          target_dir=$(cargo metadata --format-version=1 --no-deps | jq -r ".target_directory")
          find ${target_dir}/wasm32-unknown-unknown/release -name "*.wasm" -exec cp {} $HOME/unoptimized.wasm \;
          cd $HOME
          wasm-opt -Oz unoptimized.wasm -o optimized.wasm

          if [ $? -ne 0 ]; then
            echo "Error: Build failed"
            exit 1
          fi

          # Calculate SHA256 hash of optimized.wasm (use your preferred method)
          release_hash=$(sha256sum $HOME/optimized.wasm | cut -d' ' -f1)  

          # Get the package version and name
          package_version=$(jq -r '.package.version' Cargo.toml)
          package_name=$(jq -r '.package.name' Cargo.toml)

          # Create a release directory
          release_dir="release-$release_hash-$package_version-$package_name"
          mkdir $release_dir

          # Copy optimized.wasm into the release directory
          cp optimized.wasm $release_dir/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: | 
            release-*.tar.gz
          name: Release ${{ env.release_hash }}-${{ env.package_version }}-${{ env.package_name }}
  
      - name: Package Release
        run: |
           cd release-${{ env.release_hash }}-${{ env.package_version }}-${{ env.package_name }}
           tar -czvf ../release-${{ env.release_hash }}-${{ env.package_version }}-${{ env.package_name }}.tar.gz *
